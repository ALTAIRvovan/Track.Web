"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# RawConfigParser чтобы можно было нормально использовать SECRET_KEY без добавления лишних символов
config = configparser.RawConfigParser()
config.read(os.getenv('DJANGO_CONFIG_FILE', BASE_DIR + "/application/config.ini"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get("main", "SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get("main", "DEBUG")

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'study_calendar',
    'core',
    'comments',
    'debug_toolbar'
]

AUTH_USER_MODEL = 'core.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware'
]

ROOT_URLCONF = 'application.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'application.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config.get("db", "ENGINE"),
        'NAME': config.get("db", "NAME"),  # os.path.join(BASE_DIR, 'db.sqlite3'),
        'USER': config.get("db", "USER", fallback=''),
        "PASSWORD": config.get("db", "PASSWORD", fallback=''),
        "HOST": config.get("db", "HOST", fallback=''),
        "PORT": config.get("db", "PORT", fallback=''),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '../collected_static/'
STATICFILES_DIRS = ('static/',)

LOGIN_REDIRECT_URL = "root"
LOGIN_URL = "auth:login"

INTERNAL_IPS = (
    '127.0.0.1'
)

CACHES = {
    'default': {
        'BACKEND': config.get("cache", "BACKEND", fallback='django.core.cache.backends.memcached.MemcachedCache'),
        'LOCATION': config.get("cache", "LOCATION"),
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'formatter': 'verbose',
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': config.get("logging", "filename", fallback=BASE_DIR + "/logs/logs.txt"),
        },
        'console': {
            'formatter': 'simple',
            'class': 'logging.StreamHandler',
        },
    },
    'formatters': {
        'verbose': {
            'format': '[%(levelname)s] [%(asctime)s] [%(module)s][%(name)s] [%(process)d] [%(thread)d]: %(message)s'
        },
        'simple': {
            'format': '[%(levelname)s] %(message)s'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'core': {
            'handlers': ['file'],
            'level': 'DEBUG'
        },
        'comments': {
            'handlers': ['file'],
            'level': 'INFO',
        },
        'study_calendar': {
            'handlers': ['file'],
            'level': 'INFO'
        }
    },
}
